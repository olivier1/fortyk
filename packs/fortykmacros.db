{"_id":"2A3Q1Zty9JBQt6Qm","name":"Apply Run","type":"script","author":"6zwBg86XUSZ7ctUU","img":"systems/fortyk/icons/running.png","scope":"global","command":"for(let target of canvas.tokens.controlled){\n\n   game.fortyk.FortykRolls.applyActiveEffect(target,[game.fortyk.FORTYK.StatusEffects[game.fortyk.FORTYK.StatusEffectsIndex.get(\"running\")]])   \n\n}","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.Kuo3FCYYWEnuUDyL"}}}
{"_id":"EC4VKPQ3brUoczrX","name":"Apply Total Defense","type":"script","author":"6zwBg86XUSZ7ctUU","img":"systems/fortyk/icons/defense.png","scope":"global","command":"for(let target of canvas.tokens.controlled){\n\n   game.fortyk.FortykRolls.applyActiveEffect(target,[game.fortyk.FORTYK.StatusEffects[game.fortyk.FORTYK.StatusEffectsIndex.get(\"totalDef\")]])   \n\n}","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.Kuo3FCYYWEnuUDyL"}}}
{"_id":"KFoNWCVIIok6wS56","name":"Set Elevation","type":"script","author":"6zwBg86XUSZ7ctUU","img":"icons/svg/direction.svg","scope":"global","command":"new Dialog({\n    title: \"Set Elevation\",\n    content: `<div><label>Elevation:</label> <input id=\"elevation\" type=\"text\" name=\"elevation\" value=\"0\" autofocus/></div>`,\n    buttons: {\n        submit: {\n            label: 'OK',\n            callback: async(html) => {\n                let elevation = Number($(html).find('input[name=\"elevation\"]').val());\n\n                for(let token of canvas.tokens.controlled){\n                   \n                   \n\n                    token.document.update({elevation: elevation});\n                }\n\n            }\n        }\n    },\n    default: \"submit\",\n\n\n    width:100,\n    render: (html)=>{\n        html.find('input').focus()\n    }}\n          ).render(true);","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.JJnBhuEGXw9r5GwZ"}}}
{"name":"Delete Templates","type":"script","scope":"global","author":"rH1O3GTgaMN2UUme","img":"icons/svg/cancel.svg","command":"let scene=game.scenes.active;\nlet templates=scene.templates;\nfor(const template of templates){\nif(template.isOwner){\n\n    await template.delete()\n}\n}","ownership":{"default":0,"rH1O3GTgaMN2UUme":3},"flags":{"core":{"sourceId":"Macro.khQCEZE42bYCZJh0"}},"_stats":{"systemId":"fortyk","systemVersion":"0.9.3","coreVersion":"10.288","createdTime":1668108062002,"modifiedTime":1668364378801,"lastModifiedBy":"rH1O3GTgaMN2UUme"},"folder":null,"sort":0,"_id":"RP5toOx2ThtifjyR"}
{"_id":"VEz2nUnRplFLUzne","name":"Apply Speed","type":"script","author":"AGchlmaYleRSrQid","img":"systems/fortyk/icons/speed.png","scope":"global","command":"new Dialog({\n    title: \"Speed Modifier\",\n    content: `<div><label>Modifier:</label> <input id=\"speed\" type=\"text\" name=\"speed\" value=\"0\" autofocus/></div>`,\n    buttons: {\n        submit: {\n            label: 'OK',\n            callback: async(html) => {\n                let speed = $(html).find('input[name=\"speed\"]').val();\n                console.log(speed)\n\n                let aeData={};\n                aeData.id=\"speed\";\n                aeData.label= \"Speed\";\n                aeData.icon= \"systems/fortyk/icons/speed.png\";\n\n\n\n                aeData.flags= { core: { statusId: \"speed\" } }\n                aeData.duration={\n\n                    rounds:0\n                };\n                aeData.changes=[\n                    {key: \"data.evasion\", value: speed, mode:game.fortyk.FORTYK.ACTIVE_EFFECT_MODES.ADD}            \n                ]\n                for(let target of canvas.tokens.controlled){\n\n                    let actor\n                    if(token instanceof Token){\n                        actor=token.actor;\n                    }else{\n                        actor=token;\n                    }\n                    await actor.createEmbeddedDocuments(\"ActiveEffect\",[aeData]);\n                }\n            }\n        }\n    },\n    default: \"submit\",\n\n\n    width:100,\n    render: (html)=>{\n        console.log(\"hi\")\n        html.find('input[name=\"speed\"]').focus()\n    }}\n          ).render(true);","folder":null,"sort":0,"permission":{"default":2,"AGchlmaYleRSrQid":3},"flags":{"core":{"sourceId":"Macro.AOEVgvDPi0Hn3cnq"}}}
{"_id":"aeGM6Y9CaKDGT7sA","name":"Apply Frenzy","type":"script","author":"6zwBg86XUSZ7ctUU","img":"systems/fortyk/icons/frenzy.png","scope":"global","command":"for(let target of canvas.tokens.controlled){\n\n   game.fortyk.FortykRolls.applyActiveEffect(target,[game.fortyk.FORTYK.StatusEffects[game.fortyk.FORTYK.StatusEffectsIndex.get(\"frenzy\")]])   \n\n}","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.Kuo3FCYYWEnuUDyL"}}}
{"_id":"oKAXDyNOXG8pzRw5","name":"Mass Tests","type":"script","author":"6zwBg86XUSZ7ctUU","img":"icons/svg/dice-target.svg","scope":"global","command":"new Dialog({\n    title: \"Mass Test\",\n    content: `<div><label>Characteristic:</label><select name=\"characteristic\"><option value=\"agi\">agi</option><option value=\"t\">t</option><option value=\"wp\">wp</option><option value=\"s\">s</option><option value=\"per\">per</option><option value=\"int\">int</option><option value=\"fel\">fel</option><option value=\"ws\">ws</option><option value=\"bs\">bs</option></select></div><div><label>Modifier:</label> <input id=\"modifier\" type=\"text\" name=\"modifier\" value=\"0\" autofocus/></div>`,\n    buttons: {\n        submit: {\n            label: 'OK',\n            callback: async(html) => {\n                let mod = Number($(html).find('input[name=\"modifier\"]').val());\n                let char = $(html).find('select[name=\"characteristic\"]').val();\n\n                for(let token of canvas.tokens.controlled){\n                    let tokenActor=token.actor;\n                    let tokenActorData=token.actor.data;\n                    let data=token.actor.data.data;\n\n                    let testTarget=data.characteristics[char].total+mod;\n                    let test=await game.fortyk.FortykRolls.fortykTest(char, \"Test\", testTarget, tokenActor, char);\n                    let newColor=\"\";\n                    if(test.value){\n                        newColor=\"#00ff00\";\n                    }else{\n                        newColor=\"#ff0000\";\n                    }\n\n                    token.document.update({tint: newColor});\n                }\n\n            }\n        }\n    },\n    default: \"submit\",\n\n\n    width:100,\n    render: (html)=>{\n        html.find('input').focus()\n    }}\n          ).render(true);","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.jX7GuVs3qQAUPhXO"}}}
{"name":"Scatter","type":"script","author":"6zwBg86XUSZ7ctUU","img":"icons/svg/target.svg","scope":"global","command":"let chatScatter={user: game.user._id,\n                                 speaker:{actor,alias:game.user.name},\n                                 content:`Scatter! <img class=\"fortyk\" src=\"../systems/fortyk/icons/scatter.png\">`,\n                                 flavor:\"Rolling Scatters!\",\n                                 author:game.user.name};\n                await ChatMessage.create(chatScatter,{});\n                let distanceRoll=new Roll(\"1d5\");\n                await distanceRoll.roll();\n                await distanceRoll.toMessage({\n                    speaker: ChatMessage.getSpeaker({ actor: actor }),\n                    flavor: \"Rolling for scatter distance.\"\n                });\n                let directionRoll=new Roll(\"1d10\");\n                await directionRoll.roll();\n                await directionRoll.toMessage({\n                    speaker: ChatMessage.getSpeaker({ actor: actor }),\n                    flavor: \"Rolling for scatter direction.\"\n                });","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.Vlbu2ldsm0AMCxCn"}},"_id":"oYdZY9lvQVyxOWUc"}
{"name":"Set Cover","type":"script","author":"AGchlmaYleRSrQid","img":"icons/svg/cave.svg","scope":"global","command":"new Dialog({\n    title: \"Set Cover\",\n    content: `<div><label>Cover:</label> <select id=\"cover\"  name=\"cover\">\n\n<option value=\"0\">None</option>\n<option value=\"0.25\">Light Cover</option>\n<option value=\"0.5\">Medium Cover</option>\n<option value=\"0.75\">Heavy Cover</option>\n\n</select></div>`,\n    buttons: {\n        submit: {\n            label: 'OK',\n            callback: async(html) => {\n                let coverSelect = $(html).find('#cover option:selected');\n                let label=coverSelect.text();\n                console.log(coverSelect)\n                let cover=parseFloat(coverSelect.val());\n                console.log(label, cover);\n                for(let token of canvas.tokens.controlled){\n                    let actor=token.actor;\n                    actor.update({\"data.secChar.cover.value\":cover});\n                }\n                let chatCover={user: game.user._id,\n                                 speaker:{actor,alias:game.user.name},\n                                 content:`Set ${label} on selected`,\n                                 flavor:\"Cover Set\",\n                                 author:game.user.name};\n                await ChatMessage.create(chatCover,{});\n\n            }\n        }\n    },\n    default: \"submit\",\n\n\n    width:100}\n          ).render(true);","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.txqDNUWjdYVFikys"}},"_id":"rCYff2VIk5Ka3Juv","ownership":{"default":2,"AGchlmaYleRSrQid":3},"_stats":{"systemId":"fortyk","systemVersion":"0.9.3","coreVersion":"10.288","createdTime":null,"modifiedTime":1668364578949,"lastModifiedBy":"rH1O3GTgaMN2UUme"}}
{"name":"Vision & Light","type":"script","scope":"global","author":"AGchlmaYleRSrQid","img":"icons/svg/eye.svg","command":"let applyChanges = false;\n\nnew Dialog({\n    title: `Token Vision Configuration`,\n    content: `\n<form>\n<div class=\"form-group\">\n<label>Vision Type</label>\n<select id=\"vision-type\" name=\"vision-type\">\n<option value=\"nochange\">No Change</option>\n<option value=\"dim0\">Normal Vision</option>\n<option value=\"dim30\">Dark-sight (20 m)</option>\n<option value=\"dim60\">Dark-sight (40 m)</option>\n<option value=\"dim90\">Dark-sight (60 m)</option>\n<option value=\"dim120\">Preysense (80 m)</option>\n<option value=\"dim150\">Preysense (100 m)</option>\n<option value=\"dim180\">Preysense (120 m)</option>\n</select>\n</div>\n<div class=\"form-group\">\n<label>Light Source</label>\n<select id=\"light-source\" name=\"light-source\">\n<option value=\"nochange\">No Change</option>\n<option value=\"none\">None</option>\n<option value=\"candle\">Candle</option>\n<option value=\"lamp\">Glow-globe</option>\n<option value=\"bullseye\">Stab-light</option>\n</select>\n</div>\n<div class=\"form-group\">\n<label>Light Color</label>\n<input type=\"color\" value=\"${token.data.lightColor || '#000000'}\" data-edit=\"light-color\" name=\"light-color\">\n</div>\n</form>\n`,\n    buttons: {\n        yes: {\n            icon: \"<i class='fas fa-check'></i>\",\n            label: `Apply Changes`,\n            callback: () => applyChanges = true\n        },\n        no: {\n            icon: \"<i class='fas fa-times'></i>\",\n            label: `Cancel Changes`\n        },\n    },\n    default: \"yes\",\n    close: html => {\n        if (applyChanges) {\n            for ( let token of canvas.tokens.controlled ) {\n                let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n                let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n                let lightColor = html.find('[name=\"light-color\"]')[0].value || '';\n                let radiant = false;\n                let radiantEffect = 'icons/svg/sun.svg';\n                let dimSight = 0;\n                let brightSight = 0;\n                let dimLight = 0;\n                let brightLight = 0;\n                let visionMode = 'basic';\n                let lightAngle = 360;\n                let lockRotation = token.data.lockRotation;\n\n                // Set the color\n\n                // Get Vision Type Values\n                switch (visionType) {\n                    case \"dim0\":\n                        dimSight = 0;\n                        brightSight = 0;\n\n                        break;\n                    case \"dim30\":\n                        dimSight = 20;\n                        brightSight = 0;\n                        visionMode = 'lightAmplification';\n                        break;\n                    case \"dim60\":\n                        dimSight = 40;\n                        brightSight = 0;\n                        visionMode = 'lightAmplification';\n                        break;\n                    case \"dim90\":\n                        dimSight = 60;\n                        brightSight = 0;\n                        visionMode = 'lightAmplification';\n                        break;\n                    case \"dim120\":\n                        dimSight = 80;\n                        brightSight = 0;\n                        visionMode = 'darkvision';\n                        break;\n                    case \"dim150\":\n                        dimSight = 100;\n                        brightSight = 0;\n                        visionMode = 'darkvision';\n                        break;\n                    case \"dim180\":\n                        dimSight = 120;\n                        brightSight = 0;\n                        visionMode = 'darkvision';\n                        break;\n                    case \"bright120\":\n                        dimSight = 0;\n                        brightSight= 120;\n                        break;\n                    case \"nochange\":\n                    default:\n                        dimSight = token.data.dimSight;\n                        brightSight = token.data.brightSight;\n                }\n                // Get Light Source Values\n                switch (lightSource) {\n                    case \"none\":\n                        dimLight = 0;\n                        brightLight = 0;\n                        break;\n                    case \"candle\":\n                        dimLight = 5;\n                        brightLight = 2;\n                        break;\n                    case \"lamp\":\n                        dimLight = 12;\n                        brightLight = 6;\n                        break;\n                    case \"bullseye\":\n                        dimLight = 24;\n                        brightLight = 12;\n                        lockRotation = false;\n                        lightAngle = 52.5;\n                        break;\n                    case \"hooded-dim\":\n                        dimLight = 5;\n                        brightLight = 0;\n                        break;\n                    case \"hooded-bright\":\n                        dimLight = 60;\n                        brightLight = 30;\n                        break;\n                    case \"light\":\n                        dimLight = 40;\n                        brightLight = 20;\n                        break;\n                    case \"torch\":\n                        dimLight = 40;\n                        brightLight = 20;\n                        break;\n                    case \"faerie-fire\":\n                        dimLight = 10;\n                        brightLight = 0;\n                        if (!lightColor || lightColor === '#ffffff') lightColor = '#00ff00';\n                        break;\n                    case \"radiant-consumption\":\n                        dimLight = 20;\n                        brightLight = 10;\n                        radiant = true;\n                        token.toggleEffect(radiantEffect);\n                        break;\n                    case \"nochange\":\n                    default:\n                        dimLight = token.data.dimLight;\n                        brightLight = token.data.brightLight;\n                        lightAngle = token.data.lightAngle;\n                        lockRotation = token.data.lockRotation;\n                        lightColor = token.data.lightColor;\n                }\n\n                // Update Token\n                token.document.update({\n                    vision: true,\n                    dimSight: dimSight,\n                    brightSight: brightSight,\n                    dimLight: dimLight,\n                    brightLight:  brightLight,\n                    \"sight.visionMode\": visionMode,\n                    lightAngle: lightAngle,\n                    lockRotation: lockRotation,\n                    lightColor: lightColor,\n                });\n\n                if (!radiant && token.data.effects.includes(radiantEffect)) {\n                    token.toggleEffect(radiantEffect);\n                }\n            }\n        }\n    }\n}).render(true);","ownership":{"default":0,"AGchlmaYleRSrQid":3},"flags":{"core":{"sourceId":"Macro.zcCaMkBE8q6m6rX0"}},"_stats":{"systemId":"fortyk","systemVersion":"0.10.4","coreVersion":"10.291","createdTime":1681772445846,"modifiedTime":1681775494698,"lastModifiedBy":"AGchlmaYleRSrQid"},"folder":null,"sort":0,"_id":"v1NkkZyhuWcMdweg"}
{"name":"First Aid","type":"script","scope":"global","author":"AGchlmaYleRSrQid","img":"systems/fortyk/icons/first_aid.png","command":"let targetToken=game.user.targets.first();\nlet characterActor=game.user.character;\nif(targetToken===undefined){\n    ui.notifications.error(\"This macro requires a target.\");\n    return;\n}\nlet targetActor=targetToken.actor;\nif(characterActor===undefined){\n    ui.notifications.error(\"This macro requires a player character to be impersonated.\");\n    return; \n}\nlet medicae=characterActor.system.skills.medicae;\nlet pass=false;\nlet dos=0;\nlet tarWounds=targetActor.system.secChar.wounds.value;\nif(!targetActor.getFlag(\"fortyk\",\"hardy\")){\n    if(characterActor.getFlag(\"fortyk\",\"superiorchirurgeon\")){\n        if(tarWounds<0){\n            medicae-=10;\n        }\n    }else{\n        if(tarWounds<0){\n            medicae-=10*tarWounds;\n        }else if(targetActor.system.secChar.wounds.heavy){\n            medicae-=10;\n        }\n    } \n}\nlet test=await game.fortyk.FortykRolls.fortykTest(`First Aid on ${targetActor.name}`,\"\" , medicae, characterActor, `First Aid on ${targetActor.name}`);\nlet chatFirstAid={user: game.users.current,\n                speaker:{user: game.users.current},\n                content:\"\",\n                classes:[\"fortyk\"],\n                flavor:`First Aid result on ${targetActor.name}`,\n                author:game.users.current\n               }\n\n\nif(test.value){\n    let healing=test.dos+characterActor.system.characteristics.int.bonus;\n\n    if(characterActor.getFlag(\"fortyk\",\"narthecium\")){\n        let narthForm=\"1d5\"\n        let narthRoll=new Roll(narthForm,{});\n        await narthRoll.evaluate({async: false});\n        narthRoll.toMessage({flavor:\"Rolling narthecium healing\"});\n        healing+=narthRoll._total;\n    }\n    chatFirstAid.content=`${characterActor.name} successfully healed ${targetActor.name} for ${healing} wounds!`\n    tarWounds=Math.min(tarWounds+healing,targetActor.system.secChar.wounds.max);\n    if(game.user.isGM||targetActor.isOwner){\n        await targetActor.update({\"system.secChar.wounds.value\":tarWounds});\n    }else{\n        let tokenId=targetToken.id;\n\n        let socketOp={type:\"updateValue\",package:{token:tokenId,value:tarWounds,path:\"system.secChar.wounds.value\"}}\n        await game.socket.emit(\"system.fortyk\",socketOp);\n    }\n}else{\n   chatFirstAid.content=`${characterActor.name} failed to heal ${targetActor.name}...` \n}\nawait ChatMessage.create(chatFirstAid,{});","ownership":{"default":2,"AGchlmaYleRSrQid":3},"flags":{"core":{"sourceId":"Macro.269RDBpP2ITc0ZFq"}},"_stats":{"systemId":"fortyk","systemVersion":"0.10.2.5.3","coreVersion":"10.291","createdTime":1673202236701,"modifiedTime":1677951989721,"lastModifiedBy":"rH1O3GTgaMN2UUme"},"folder":null,"sort":0,"_id":"vo3c1vsog3d4uw2p"}
{"name":"Remove Tint","type":"script","author":"6zwBg86XUSZ7ctUU","img":"icons/svg/waterfall.svg","scope":"global","command":"for(let token of canvas.tokens.controlled){\n    \n    if(token.data.tint!==\"\"){\n        token.document.update({tint: \"\"});\n    }\n    \n}","folder":null,"sort":0,"permission":{"default":0,"6zwBg86XUSZ7ctUU":3},"flags":{"core":{"sourceId":"Macro.ShqNbaMLIY66U95F"}},"_id":"w5rOn1wgr1BtbJot"}
